@model _30080193.Models.Bookings

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Content/bootstrap-datepicker.css">
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Bookings</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.LocationId, "Location", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LocationId", null, htmlAttributes: new { @class = "form-control", @id = "booking_loc" })
                @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "booking_email" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BookingDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BookingDate, new { htmlAttributes = new { @class = "form-control", @id = "booking_date", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.BookingDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BookingTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BookingTime, new { htmlAttributes = new { @class = "form-control", @id = "booking_time", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bookinghours, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bookinghours, new { htmlAttributes = new { @class = "form-control", @id = "booking_hours" } })
                @Html.ValidationMessageFor(model => model.Bookinghours, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="btn_subbooking" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/booking.js")
    @Scripts.Render("~/Scripts/booking_hour.js")
    @Scripts.Render("~/Scripts/booking_constraint_date.js")
    @Scripts.Render("~/Scripts/booking_constraint_hour.js")
    @Scripts.Render("~/Scripts/booking_constraint_location.js")
    @Scripts.Render("~/Scripts/validate_email.js")
    @Scripts.Render("~/Scripts/bootstrap-datepicker.min.js")
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>
    <script>
        $("#booking_date").datepicker({
            changeMonth: true,
            changeYear: true,
            "format": "yyyy/mm/dd",
            "setDate": new Date(),
            "todayHighlight": true,
            "autoclose": true
        });
    </script>
    <script>
        $('#booking_time').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            minTime: '10',
            maxTime: '6:00pm',
            defaultTime: '0',
            startTime: '10:00',
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function () { // have to call on change function inside with attribute change
                var booking_date = document.getElementById("booking_date").value;
                var booking_time = document.getElementById("booking_time").value;
                var booking_hours = document.getElementById("booking_hours").value;
                var booking_loc = document.getElementById("booking_loc").value;
                var booking_end_time = "00:00";
                var endhr;
                if ((booking_time.length < 10) && (booking_time.length > 6)) { // if time is xx:xx AM or PM, get time only
                    if (booking_time.substring(booking_time.length - 2, booking_time.length) == "AM") {
                        booking_time = booking_time.substring(0, booking_time.length - 3);
                    } else {
                        if (parseInt(booking_time.substring(0, 2)) == 12) //if its 12:00 PM
                        {
                            booking_time = booking_time.substring(0, booking_time.length - 3);
                        }
                        else {
                            var hr = parseInt(booking_time.substring(0, 1)) + 12;
                            booking_time = hr + booking_time.substring(1, booking_time.length - 3);
                        }
                    }
                    endhr = parseInt(booking_time.substring(0, 2)) + parseInt(booking_hours);
                    booking_end_time = endhr + booking_time.substring(booking_time.length - 3, booking_time.length);
                }
                else if (booking_time.length > 10) { // if time is xxxx/xx/xx xx:xx
                    booking_time = booking_time.substring(booking_time.length - 5, booking_time.length);
                    endhr = parseInt(booking_time.substring(0, 2)) + parseInt(booking_hours);
                    booking_end_time = endhr + booking_time.substring(booking_time.length - 3, booking_time.length);
                }
                var is_conflict = false;
                // get date, starttime end time and locaiton from index.cshtml
                var dt = localStorage.getItem("dt").split(",").map(function (item) {
                    return item.trim();
                });
                var start = localStorage.getItem("start").split(",").map(function (item) {
                    return item.trim();
                });
                var end = localStorage.getItem("end").split(",").map(function (item) {
                    return item.trim();
                });
                var loc = localStorage.getItem("loc").split(",").map(function (item) {
                    return item.trim();
                });
                var i;
                for (i = 0; i < start.length; i++) {
                    var clock = start[i];
                    var clock_end_time = end[i];
                    var location = loc[i];
                    // first check if the location is the same
                    if (location == booking_loc) {
                        // then check date : year month and day
                        if ((dt[i].substring(0, 4) == booking_date.substring(0, 4)) && (dt[i].substring(5, 7) == booking_date.substring(5, 7)) && (dt[i].substring(8, 10) == booking_date.substring(8, 10))) {
                            // case 1: two events happen at the same time
                            if (booking_time == clock) {
                                is_conflict = true;
                                break;
                            }
                            // case 2: this event happens first, then followed by other's but conflict
                            if ((booking_time < clock) && (booking_end_time > clock)) {
                                is_conflict = true;
                                break;
                            }
                            // case 3: this event happens later
                            if ((clock < booking_time) && (clock_end_time > booking_time)) {
                                is_conflict = true;
                                break;
                            }
                        }
                    }
                }

                if (is_conflict) {
                    alert("Time conflict! Please go check the calendar!");
                    document.getElementById("booking_time").value = "";
                }
            }
        });
    </script>
    <script>
        $("#booking_date").on('change', function () {
            var tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1)
            var d = new Date(document.getElementById("booking_date").value);
            if (tomorrow > d) { // if it's before tomorrow then not validated
                alert("invalid date!");
                document.getElementById("booking_date").value = '';
            }
        });
    </script>

}
